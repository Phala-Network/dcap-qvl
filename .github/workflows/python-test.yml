name: Test Python Bindings

on:
  push:
    branches: [main, python-binding]
    paths:
      - "python-bindings/**"
      - "src/**"
      - "Cargo.toml"
      - ".github/workflows/python-test.yml"
  pull_request:
    branches: [main]
    paths:
      - "python-bindings/**"
      - "src/**"
      - "Cargo.toml"
      - ".github/workflows/python-test.yml"

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        # Test fewer combinations to reduce CI time while maintaining coverage
        exclude:
          - os: windows-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.11"
          - os: macos-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.11"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: . -> target

      - name: Install Python dependencies and build
        shell: bash
        run: |
          cd python-bindings
          python -m pip install --upgrade pip
          pip install maturin pytest
          maturin develop --features python

      - name: Run Python tests
        run: |
          cd python-bindings
          python -m pytest tests/ -v

      - name: Test basic functionality
        run: |
          python -c "
          import dcap_qvl
          print(f'Python {\"${{ matrix.python-version }}\"} - dcap_qvl {dcap_qvl.__version__}')
          print(f'Available: {dcap_qvl.__all__}')

          # Test creating collateral
          collateral = dcap_qvl.QuoteCollateralV3(
              pck_crl_issuer_chain='test',
              root_ca_crl=b'test',
              pck_crl=b'test',
              tcb_info_issuer_chain='test',
              tcb_info='{\"test\": true}',
              tcb_info_signature=b'test',
              qe_identity_issuer_chain='test',
              qe_identity='{\"test\": true}',
              qe_identity_signature=b'test'
          )

          # Test JSON serialization
          json_str = collateral.to_json()
          collateral2 = dcap_qvl.QuoteCollateralV3.from_json(json_str)
          print('✅ Basic functionality test passed!')
          "

      - name: Test async functionality
        if: matrix.python-version != '3.8' # Skip for Python 3.8 due to asyncio.run limitations
        run: |
          python -c "
          import asyncio
          import dcap_qvl

          async def test_async():
              try:
                  result = await dcap_qvl.get_collateral_from_pcs(b'invalid_quote')
                  print('Unexpected success')
                  exit(1)
              except Exception as e:
                  print(f'✅ Async function works correctly (expected error): {type(e).__name__}')

          asyncio.run(test_async())
          print('✅ Async functionality test completed!')
          "

  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          cd python-bindings
          python -m pip install --upgrade pip
          pip install black isort flake8

      - name: Check code formatting with black
        run: |
          cd python-bindings
          black --check --diff .

      - name: Check import sorting with isort
        run: |
          cd python-bindings
          isort --check-only --diff .

      - name: Lint with flake8
        run: |
          cd python-bindings
          flake8 --max-line-length=88 --extend-ignore=E203 .

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          cd python-bindings
          python -m pip install --upgrade pip
          pip install maturin pytest pytest-cov
          maturin develop --features python

      - name: Run tests with coverage
        run: |
          cd python-bindings
          python -m pytest tests/ --cov=dcap_qvl --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: python-bindings/coverage.xml
          flags: python
          name: python-coverage
          fail_ci_if_error: false
