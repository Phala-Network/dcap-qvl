[package]
name = "dcap-qvl"
version = "0.3.2"
edition = "2021"
license = "MIT"
description = "This crate implements the quote verification logic for DCAP (Data Center Attestation Primitives) in pure Rust."
authors = ["Kevin Wang <wy721@qq.com>"]
repository = "https://github.com/Phala-Network/dcap-qvl"

[dependencies]
borsh = { version = "1.5.7", default-features = false, features = ["derive"], optional = true }
hex = { version = "0.4", default-features = false, features = ["alloc"] }
serde = { version = "1.0.215", default-features = false, features = ["derive"] }
base64 = { version = "0.22.1", default-features = false, features = ["alloc"] }
scale = { package = "parity-scale-codec", version = "3.6.12", default-features = false, features = [
    "derive",
] }
scale-info = { version = "2.11.6", default-features = false, features = ["derive"] }
chrono = { version = "0.4.31", default-features = false, features = [
    "alloc",
    "serde",
] }
const-oid = { version = "0.9.5", default-features = false }
x509-cert = { version = "0.2.4", default-features = false }
byteorder = { version = "1.5.0", default-features = false }
pem = { version = "3", default-features = false }
asn1_der = { version = "0.7", default-features = false, features = [
    "native_types",
] }
der = { version = "0.7.8", default-features = false, features = ["alloc"] }

log = { version = "0.4.20", default-features = false }

anyhow = { version = "1.0.99", optional = true }

ring = { version = "0.17", default-features = false, features = [
    "alloc",
] }
reqwest = { version = "0.12.23", optional = true, default-features = false, features = [
    "rustls-tls",
    "blocking",
    "hickory-dns",
] }
urlencoding = { version = "2", optional = true }
serde_json = { version = "1.0.143", optional = true, features = [
    "preserve_order",
] }
tracing = { version = "0.1", optional = true }
futures = { version = "0.3", optional = true }
getrandom = { version = "0.2", optional = true }
serde-wasm-bindgen = { version = "0.6.5", optional = true}
wasm-bindgen = { version = "0.2.95", optional = true }
wasm-bindgen-futures = { version = "0.4.50" }
serde_bytes = { package = "serde-human-bytes", version = "0.1" }

# Python bindings
pyo3 = { version = "0.25", optional = true, features = ["extension-module", "abi3-py38", "generate-import-lib"] }
pyo3-async-runtimes = { version = "0.25", optional = true, features = ["tokio-runtime"] }
tokio = { version = "1.47.1", optional = true, features = ["full"] }

[dependencies.dcap-qvl-webpki]
version = "0.103.3"
features = ["alloc", "ring"]

[dependencies.webpki]
version = "0.102.8"
package = "rustls-webpki"
default-features = false
features = ["alloc", "ring"]

[dev-dependencies]
insta = "1.41.1"
reqwest = "0.12.23"
serde_json = "1.0.143"
tokio = { version = "1.47.1", features = ["full"] }

[lib]
name = "dcap_qvl"
crate-type = ["cdylib", "rlib"]

[features]
default = ["std", "report"]
std = [
    "serde/std",
    "scale/std",
    "scale-info/std",
    "ring/std",
    "webpki/std",
    "const-oid/std",
    "pem/std",
    "asn1_der/std",
    "der/std",
    "serde_json",
    "anyhow",
    "urlencoding",
    "borsh?/std",
]
borsh = ["dep:borsh"]
borsh_schema = ["borsh", "borsh/unstable__schema"]
report = ["std", "tracing", "futures", "reqwest"]
js = ["ring/wasm32_unknown_unknown_js", "getrandom/js", "serde-wasm-bindgen", "wasm-bindgen"]
python = ["pyo3", "pyo3-async-runtimes", "tokio", "std", "report"]
contract = ["getrandom"]
